$(function() {
    "use strict";

    $(document).ready(function() {
        // initiate the JS plugins only on non-auth pages
        if ( ! isAuthPage()) {
            App.initWysiwyg();
            App.initMultiSelect();
            App.initDatePicker();
        }
    });

    function isAuthPage() {
        return $('body').hasClass('auth');
    }

    $(function() {
            $(".preloader").fadeOut();
        }),

        jQuery(document).on("click", ".mega-dropdown", function(i) {
            i.stopPropagation();
        });


    var i = function() {
        (window.innerWidth > 0 ? window.innerWidth : this.screen.width) < 1170 ? ($("body").addClass("mini-sidebar"),
            $(".navbar-brand span").hide(), $(".scroll-sidebar, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible"),
            $(".sidebartoggler i").addClass("ti-menu")) : ($("body").removeClass("mini-sidebar"),
            $(".navbar-brand span").show());
        var i = (window.innerHeight > 0 ? window.innerHeight : this.screen.height) - 1;
        (i -= 70) < 1 && (i = 1), i > 70 && $(".page-wrapper").css("min-height", i + "px");
    };


    $(window).ready(i), $(window).on("resize", i), $(".sidebartoggler").on("click", function() {
            $("body").hasClass("mini-sidebar") ? ($("body").trigger("resize"), $(".scroll-sidebar, .slimScrollDiv").css("overflow", "hidden").parent().css("overflow", "visible"),
                $("body").removeClass("mini-sidebar"), $(".navbar-brand span").show()) : ($("body").trigger("resize"),
                $(".scroll-sidebar, .slimScrollDiv").css("overflow-x", "visible").parent().css("overflow", "visible"),
                $("body").addClass("mini-sidebar"), $(".navbar-brand span").hide());
        }),



        $(".fix-header .header").stick_in_parent({}), $(".nav-toggler").click(function() {
            $("body").toggleClass("show-sidebar"), $(".nav-toggler i").toggleClass("mdi mdi-menu"),
                $(".nav-toggler i").addClass("mdi mdi-close");
        }),



        $(".search-box a, .search-box .app-search .srh-btn").on("click", function() {
            $(".app-search").slideToggle(200);
        }),



        $(".floating-labels .form-control").on("focus blur", function(i) {
            $(this).parents(".form-group").toggleClass("focused", "focus" === i.type || this.value.length > 0);
        }).trigger("blur"), $(function() {
            for (var i = window.location, o = $("ul#sidebarnav a").filter(function() {
                    return this.href == i;
                }).addClass("active").parent().addClass("active");;) {
                if (!o.is("li")) break;
                o = o.parent().addClass("in").parent().addClass("active");
            }
        }),

        $(function() {
            $("#sidebarnav").metisMenu();
        }),

        $(".scroll-sidebar").slimScroll({
            position: "left",
            size: "5px",
            height: "100%",
            color: "#dcdcdc"
        }),

        $(".message-center").slimScroll({
            position: "right",
            size: "5px",
            color: "#dcdcdc"
        }),

        $(".aboutscroll").slimScroll({
            position: "right",
            size: "5px",
            height: "80",
            color: "#dcdcdc"
        }),

        $(".message-scroll").slimScroll({
            position: "right",
            size: "5px",
            height: "570",
            color: "#dcdcdc"
        }),

        $(".chat-box").slimScroll({
            position: "right",
            size: "5px",
            height: "470",
            color: "#dcdcdc"
        }),

        $(".slimscrollright").slimScroll({
            height: "100%",
            position: "right",
            size: "5px",
            color: "#dcdcdc"
        }),



        $("body").trigger("resize"), $(".list-task li label").click(function() {
            $(this).toggleClass("task-done");
        }),



        $("#to-recover").on("click", function() {
            $("#loginform").slideUp(), $("#recoverform").fadeIn();
        }),



        $('a[data-action="collapse"]').on("click", function(i) {
            i.preventDefault(), $(this).closest(".card").find('[data-action="collapse"] i').toggleClass("ti-minus ti-plus"),
                $(this).closest(".card").children(".card-body").collapse("toggle");
        }),



        $('a[data-action="expand"]').on("click", function(i) {
            i.preventDefault(), $(this).closest(".card").find('[data-action="expand"] i').toggleClass("mdi-arrow-expand mdi-arrow-compress"),
                $(this).closest(".card").toggleClass("card-fullscreen");
        }),



        $('a[data-action="close"]').on("click", function() {
            $(this).closest(".card").removeClass().slideUp("fast");
        });

        $('.confirm-delete').click(App.confirmDelete);
        $('.reorder').click(App.initReordering);
        $('#use_monospace_font').change(App.togglePoemMonospace);
});

// use this pseudo-class to declare all custom methods
// which will be used in the application
let App = {

    ///////////////////////////////////////////////////////////////////////////
    /**
     * Initialize the WYSIWYG bootstrap editor with the respective options.
     * For full list, see admin/js/lib/html5-editor/bootstrap-wysihtml5.js,
     * section defaultOptions.
     */
    initWysiwyg: function() {
        $('.textarea_editor').wysihtml5({
            "html" : true,  // button to edit generated HTML
            "image": true,  // button to insert image
        });
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * Initialize Loe's jQuery multi-select plugin.
     */
    initMultiSelect: function() {
        $('.multi-select').multiSelect({
            keepOrder: true,
        });
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * Even though there's now a type="date" support for input fields,
     * it doesn't have an option to clear the field and send an empty
     * value. This is why bootstrap's date picker will be used instead.
     * 
     * NB! Initiate the datepicker on each element individually in
     *     order to allow for dynamic customization of settings
     *     using data attributes.
     */
    initDatePicker: function() {
        $('.datepicker').each(function() {
            $element = $(this);

            $element.datepicker({
                autoclose:      true,
                todayHighlight: true,
                minViewMode:    $element.data('date-min-view-mode') || 0,
                maxViewMode:    $element.data('date-max-view-mode') || 4,
                weekStart:      1,
                clearBtn:       true,
                format:         $element.data('date-format') || 'dd.mm.yyyy.',
            });
        });
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * When an item's delete button is pressed, a sweetalert
     * pop-up window should ask for confirmation which, upon
     * granted, should send a DELETE request to the backend.
     * 
     * @param {Event} e 
     */
    confirmDelete: function(e) {
        e.preventDefault();

        // take the delete URL and set it as the form's action
        // upon confirmation
        var url = $(this).attr('href');

        swal({
                title:              DELETE_PROMPT,
                showCancelButton:   true,
                confirmButtonColor: "#DD6B55",
                confirmButtonText:  YES,
                cancelButtonText:   CANCEL,
                closeOnConfirm:     true,
                allowOutsideClick:  true,
            },
            function(){
                $('#destroy-form').attr('action', url).submit();
            }
        );
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * Some tables can have their records reordered, so the
     * respective resource in the CMS has a button to do so.
     * Clicking this button should initiate the reordering,
     * i.e. all objects should be fetched from the database
     * and displayed in a pop-up in a reorderable manner.
     * 
     * @param {Event} e 
     */
    initReordering: function(e) {
        e.preventDefault();

        // the URL of the tag is used to fetch all records
        var url = $(this).attr('href');

        App.fetchDataForReordering(url);
    },

    ///////////////////////////////////////////////////////////////////////////
    fetchDataForReordering: function(url) {
        $.ajax({
            url: url,
            cache: false
        })
        .done(function(data) {
            App.openReorderPopup(data, url);
        });
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * Open the reorder pop-up, initialize the multi-select library
     * and specify what should be done on save.
     * 
     * @param {JSON}   data 
     * @param {String} saveUrl 
     */
    openReorderPopup: function(data, saveUrl) {
        var body = App.prepareReorderPopupBody(data);

        swal(
            {
                title:               REORDER,
                text:                body,
                html:                true,
                showCancelButton:    true,
                cancelButtonText:    CANCEL,
                confirmButtonText:   SUBMIT,
                confirmButtonColor:  '#1976d2',
                closeOnConfirm:      false,
                showLoaderOnConfirm: true,
            },

            // save callback
            function() {
                App.saveReorderedElements(saveUrl);
            }
        );

        // initiate the multi-select library
        // once the pop-up is constructed
        App.initMultiSelect();
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * The body of the reorder pop-up should consist of a
     * select tag containing all the previously fetched
     * records from the database.
     * 
     * NB! Keep in mind that all options should be marked
     *     as selected in order for the multi-select library
     *     to pass data to back-end in its entirety.
     * 
     * @param {JSON} data – database records
     * @returns 
     */
    prepareReorderPopupBody: function(data) {
        var $html = $('<select id="reordering" class="multi-select" multiple>');

        for (i = 0; i < data.length; i++) {
            var id    = data[i].id,
                title = data[i].title;

            $html.append('<option value="' + id + '" selected="selected">' + title + '</option>')
        }

        // return as clean HTML, not as jQuery object
        return $html[0].outerHTML;
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * Send a POST request to save the order of the IDs.
     * 
     * @param {String} url
     */
    saveReorderedElements: function(url) {
        var ids      = $('#reordering').val(),
            formData = {'id[]': ids};

        $.ajax({
            type:     "POST",
            url:      url,
            data:     formData,
            dataType: "json",
            encode:   true,
            headers: {
                'X-CSRF-Token': CSRF_TOKEN, 
           },
        })
        .done(function () {
            App.reorderSuccessCallback();
        })
        .fail(function(xhr) {
            App.reorderErrorCallback(xhr.responseJSON.message);
        });
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * If the reordering POST request is successful,
     * the page should be reloaded in order for the
     * user to see the changes also on the paginated
     * data. A success flash message will be shown, too.
     */
    reorderSuccessCallback: function() {
        window.location = window.location;
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * If the reordering POST request fails for some reason,
     * the error message should be displayed in a follow-up
     * error pop-up.
     * 
     * @param {String} errorMessage
     */
    reorderErrorCallback: function(errorMessage) {
        swal({
            title: ERROR,
            text:  errorMessage,
            type: "error"
        });
    },

    ///////////////////////////////////////////////////////////////////////////
    /**
     * Some poems require white-spaces for aesthetic purposes
     * regarding the text alignment – in such cases a monospace
     * font should be used which is an option triggered by a
     * checkbox. Once this checkbox changes states, the respective
     * poem textarea should be (un)assigned a monospace class.
     */
    togglePoemMonospace: function() {
        $(this).is(':checked')
            ? $('#text').addClass('monospace')
            : $('#text').removeClass('monospace');
    },
    
};